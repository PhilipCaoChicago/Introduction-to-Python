http://www.codeskulptor.org/#user43_wWfeUQmqi1RwHj9.py
# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}



# define card class
class Card:
    def __init__(self, suit, rank):
        self.hide = False
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        if self.hide == False:
            card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                       CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
            canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
    
        elif self.hide == True:
            card_loc = (1.5 * CARD_SIZE[0], 0.5 * CARD_SIZE[1] )
            canvas.draw_image(card_back, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
            
    def hide_card(self):
        self.hide = True
        
    def expose_card(self):
        self.hide = False
            
# define hand class
class Hand:
    def __init__(self):
        self.card_list = []	# create Hand object
    

    def __str__(self):
        ans = ""
        for i in range(len(self.card_list)):
            ans += str(self.card_list[i]) + " "
        return "Hand contains " + ans
    # return a string representation of a hand

    def add_card(self, card):
        self.card_list.append(card)	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        self.hand_value = 0
        Ace_Exist = False
        
        for i in range(len(self.card_list)):
            if self.card_list[i].get_rank() != 'A':
                self.hand_value += VALUES[self.card_list[i].get_rank()]
            if self.card_list[i].get_rank() == 'A':
                self.hand_value += VALUES[self.card_list[i].get_rank()]
                Ace_Exist = True
        if Ace_Exist == True: 
            if self.hand_value +10 <= 21:
                self.hand_value += 10
                return self.hand_value
            else:return self.hand_value
        else: 
            return self.hand_value
        
        # compute the value of the hand, see Blackjack video
   
    def draw(self, canvas, pos):
        for i in range(len(self.card_list)):
            self.card_list[i].draw(canvas, [pos[0] + 82 * i, pos[1]])
            # draw a hand on the canvas, use the draw method for cards
    

new_player_hand = Hand()
dealer_hand = Hand() 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck_list = []
        self.dealer_list=[]
        for i in SUITS:
            for j in RANKS:
                self.deck_list.append(Card(i,j))
                
                # create a Deck object

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck_list)    # use random.shuffle()

    def deal_card(self):
        card = random.choice(self.deck_list)
        self.deck_list.remove(card)
        return card
            # deal a card object from the deck
    
    def __str__(self):
        ans = ""
        for i in range(len(self.deck_list)):
            ans += str(self.deck_list[i]) + " "
        return "Deck contains " + ans	# return a string representing the deck



#define event handlers for buttons
def deal():
    
    global outcome, score, in_play, new_deck, new_player_hand, dealer_hand, message, card3
    message = "Hit or stand?"
    
    if in_play == True:
        outcome = "You lost"
        message = "New Deal?"
        in_play = False
        score -= 1

    # your code goes here
    new_deck = Deck()
    new_deck.shuffle()
    
    new_player_hand = Hand()
    card1 = new_deck.deal_card()
    card2 = new_deck.deal_card()
    new_player_hand.add_card(card1)
    new_player_hand.add_card(card2)
    
    
    dealer_hand = Hand()
    card3 = new_deck.deal_card()
    card3.hide_card()
    card4 = new_deck.deal_card()
    dealer_hand.add_card(card3)
    dealer_hand.add_card(card4)
    
    
    in_play = True

def hit():
    global outcome, in_play, new_deck, new_player_hand, dealer_hand, score, message
    if in_play == True:
        if new_player_hand.get_value() <= 21:
            card = new_deck.deal_card()
            new_player_hand.add_card(card)
            if new_player_hand.get_value() > 21:
                card3.expose_card()
                outcome = "You went bust and lost."
                message = "New Deal?"
                in_play = False
                score -= 1
            else: 
                pass
        else:
            card3.expose_card()
            outcome = "You went bust and lost."
            message = "New Deal?"
            in_play = False
            score -= 1

       
def stand():
    global outcome, in_play, new_deck, new_player_hand, dealer_hand, score, card3, message
    if in_play == True:
        while dealer_hand.get_value() < 17:
            card = new_deck.deal_card()
            dealer_hand.add_card(card)
        if dealer_hand.get_value() > 21:
            card3.expose_card()
            outcome = "Dealer went bust. You won"
            message = "New Deal?"
            in_play = False
            score += 1
        else:
            if new_player_hand.get_value() > dealer_hand.get_value():
                card3.expose_card()
                outcome =  "You won"
                message = "New Deal?"
                in_play = False
                score += 1
            else:
                card3.expose_card()
                outcome =  "You lost"
                message = "New Deal?"
                in_play = False
                score -= 1
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below    
    dealer_hand.draw(canvas, [80, 200])
    new_player_hand.draw(canvas, [80, 400])
    canvas.draw_text('Blackjack', [100, 80], 60, "blue")
    canvas.draw_text('Dealer', [80, 150], 30, "black")
    canvas.draw_text('Player', [80, 350], 30, "black")
    canvas.draw_text('Score ' + str(score), [400, 100], 30, "black")
    canvas.draw_text(outcome, [200, 150], 30, "black")
    canvas.draw_text(message, [250, 350], 30, "black")
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
